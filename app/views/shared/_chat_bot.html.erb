<div id="chatbot">

  <div class="chat-popup card text-white bg-primary" v-if="chatOpen">
    <div class="card-header">NimbleHQ</div>
    <div id="messageContainer" class="card-body text-dark bg-light chat-messages">

      <div v-for="message in messages" class="alert chat-message" :class="getMessageClass(message)" role="alert">
        {{message.body}}
      </div>

    </div>
    <div class="card-footer text-dark bg-light d-flex flex-row">
      <textarea v-model="message" class="form-control" id="messageInput" rows="2" placeholder="Ask a question"></textarea>
      <button @click="onSendClick" class="btn rounded-circle send-button bg-primary text-white ml-2">
        <svg aria-hidden="true" data-prefix="fas" data-icon="paper-plane" class="svg-inline--fa fa-paper-plane fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
          <path fill="currentColor" d="M476 3.2L12.5 270.6c-18.1 10.4-15.8 35.6 2.2 43.2L121 358.4l287.3-253.2c5.5-4.9 13.3 2.6 8.6 8.3L176 407v80.5c0 23.6 28.5 32.9 42.5 15.8L282 426l124.6 52.2c14.2 6 30.4-2.9 33-18.2l72-432C515 7.8 493.3-6.8 476 3.2z"></path>
        </svg>
      </button>
    </div>
  </div>

  <div v-if="showBotMessage && !chatOpen" class="start-conversation popover bs-popover-left" role="tooltip">
    <div class="arrow" style="top: 16px;"></div>
    <h3 class="popover-header"></h3>
    <div class="popover-body">Hey there! What would you like to learn today?</div>
  </div>

  <div class="chat" @click="chatOpen = !chatOpen">
    <button class="btn rounded-circle chat-button">
      <svg aria-hidden="true" data-prefix="fas" data-icon="robot" class="svg-inline--fa fa-robot fa-w-20" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512">
        <path fill="currentColor" d="M0 256v128c0 17.7 14.3 32 32 32h32V224H32c-17.7 0-32 14.3-32 32zM464 96H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H176c-44.2 0-80 35.8-80 80v272c0 35.3 28.7 64 64 64h320c35.3 0 64-28.7 64-64V176c0-44.2-35.8-80-80-80zM256 416h-64v-32h64v32zm-32-120c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zm128 120h-64v-32h64v32zm96 0h-64v-32h64v32zm-32-120c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40zm192-72h-32v192h32c17.7 0 32-14.3 32-32V256c0-17.7-14.3-32-32-32z"></path>
      </svg>
    </button>
  </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js"></script>

<script>
    var app = new Vue({
        el: '#chatbot',
        data: {
            showBotMessage: false,
            chatOpen: false,
            conversationId: null,
            participantId: null,
            messages: [],
            message: '',
            conversationChannel: null,
            scrollComplete: false
        },

        watch: {
            conversationId: function (newConversationId, oldConversationId) {
                if (oldConversationId === null && newConversationId !== null) {
                    this.initApp()
                }
            },
            chatOpen: function () {
                if (this.chatOpen && !this.scrollComplete) {

                    Vue.nextTick(() => {
                        var messageContainer = document.getElementById("messageContainer");
                        messageContainer.scrollTop = messageContainer.scrollHeight;
                        this.scrollComplete = true
                    })
                }
            }
        },

        mounted() {
            console.log('NIMBLE_HQ_C_ID: ' + NIMBLE_HQ_C_ID)

            if (NIMBLE_HQ_C_ID !== null) {
                this.conversationId = NIMBLE_HQ_C_ID
            }

            if (NIMBLE_HQ_U_ID !== null) {
                this.participantId = NIMBLE_HQ_U_ID
            }

            setTimeout(() => {
                this.showBotMessage = true
            }, 3000)

        },
        methods: {
            onSendClick() {

                if (this.conversationId === null) {
                    this.createConversation()
                    return
                }

                var request = {
                    message: this.message
                }
                var settings = {
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(request),
                    dataType: "json",
                    success: (data, textStatus) => {
                        console.log('Send success')
                        console.log(data)
                        console.log('Status: ' + textStatus)
                        this.message = ''
                    }
                }

                $.ajax('/message/' + this.conversationId + '.json', settings)
            },

            createConversation() {

                var request = {
                    conversation: {
                        status: 'new'
                    },
                    message: this.message
                }
                var settings = {
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(request),
                    dataType: "json",
                    beforeSend: (request) => {
                        request.setRequestHeader("X-CSRF-Token", Rails.csrfToken());
                    },
                    success: (data, textStatus) => {
                        console.log('Create success')
                        console.log(data)
                        console.log('Status: ' + textStatus)
                        this.conversationId = data.conversation_id

                        if (data.visitor_id) {
                            this.participantId = data.visitor_id
                        }
                        else {
                            this.participantId = data.user_id
                        }

                        this.message = ''
                    }
                }

                $.ajax('/conversations.json', settings)
            },

            initApp() {
                this.loadMessages()
                console.log('initApp, this.conversationId: ' + this.conversationId)
                this.conversationChannel = App.cable.subscriptions.create({
                    channel: "ConversationChannel",
                    conversation_id: this.conversationId
                }, {
                    received: (data) => {
                        console.log('received data')
                        console.log(data)

                        if (data['type'] === 'chat') {
                            this.messages.push(data['message']);
                        }
                    }
                })
            },

            loadMessages() {
                $.get('/messages/' + this.conversationId + '.json', (data) => {
                    console.log('messages')
                    console.log(data)
                    this.messages = data
                }, "json");
            },

            getMessageClass(message) {
                if(message.visitor_id === this.participantId || message.user_id === this.participantId) {
                    return 'alert-primary'
                }

                return 'alert-secondary'
            }
        }
    })
</script>